{
	"author": "kuafuwang",
	"name": "lpg",
	"bugs": {
		"url": "https://github.com/kuafuwang/LPG-VScode/issues"
	},
	"categories": [],
	"description": "Language server for lpg",
	"homepage": "https://github.com/kuafuwang/LPG-VScode/blob/master/README.md",
	"keywords": [
		"LPG",
		"lpg"
	],
	"license": "MIT",
	"publisher": "kuafuwang",
	"repository": {
		"type": "git",
		"url": "https://github.com/kuafuwang/LPG-VScode"
	},
	"version": "0.0.1",
	"engines": {
		"vscode": "^1.48.0"
	},
	"activationEvents": [
		"onLanguage:lpg"
	],
	"main": "./out/extension",
	"contributes": {
		"languages": [
			{
				"id": "lpg",
				"extensions": [
					".g",
					".gi",
					".lpg"
				]
			}
		],
		"commands": [
			{
				"command": "lpg.call-graph",
				"title": "Show Grammar Call Graph"
			},
			{
				"command": "lpg.rrd.singleRule",
				"title": "Show Railroad Diagram for Rule"
			},
			{
				"command": "lpg.rrd.allRules",
				"title": "Show Railroad Diagram for all Rules"
			},
			{
				"command": "lpg.firset.singleRule",
				"title": "Show first set  for Rule"
			},
			{
				"command": "lpg.firset.allRules",
				"title": "Show first set for all Rules"
			},
			{
				"command": "lpg.fowllow.singleRule",
				"title": "Show fowllow set  for Rule"
			},
			{
				"command": "lpg.fowllow.allRules",
				"title": "Show fowllow set for all Rules"
			},
			{
				"command": "lpg.inlineNonTerminal",
				"title": "Inline Non-Terminal"
			},
			{
				"command": "lpg.MakeLeftRecursive",
				"title": "Make Left Recursive"
			},
			{
				"command": "lpg.makeEmpty",
				"title": "Make Empty"
			},
			{
				"command": "lpg.MakeNonEmpty",
				"title": "Make Non-Empty"
			},
			{
				"command": "lpg.tools.generateParser",
				"title": "Generate parser for grammar file"
			}
		],
		"menus": {
			"editor/context": [
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.call-graph",
					"group": "lpg@1"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.rrd.singleRule",
					"group": "lpg@2"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.rrd.allRules",
					"group": "lpg@3"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.firset.singleRule",
					"group": "lpg@4"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.firset.allRules",
					"group": "lpg@5"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.fowllow.singleRule",
					"group": "lpg@6"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.fowllow.allRules",
					"group": "lpg@7"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.inlineNonTerminal",
					"group": "lpg@8"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.MakeLeftRecursive",
					"group": "lpg@9"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.makeEmpty",
					"group": "lpg@10"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.MakeNonEmpty",
					"group": "lpg@11"
				},
				{
					"when": "resourceLangId == lpg",
					"command": "lpg.tools.generateParser",
					"group": "lpg@12"
				}
			]
		},
		"configuration": {
			"type": "object",
			"title": "Example configuration",
			"properties": {
				"languageServerExample.maxNumberOfProblems": {
					"scope": "resource",
					"type": "number",
					"default": 10000,
					"description": "Controls the maximum number of problems produced by the server."
				},
				"languageServerExample.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the language server."
				},
				"lpg.referencesCodeLens.enabled": {
					"type": "boolean",
					"default": false,
					"description": "Enable/disable the references code lens"
				},
				"lpg.customCSS": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "List of custom CSS URIs for diagram SVG files"
				},
				"lpg.rrd.saveDir": {
					"type": "string",
					"default": "",
					"description": "Default export target folder for railroad diagrams"
				},
				"lpg.firset.saveDir": {
					"type": "string",
					"default": "",
					"description": "Default export target folder for firset set"
				},
				"lpg.fowllow.saveDir": {
					"type": "string",
					"default": "",
					"description": "Default export target folder for fowllow set "
				},
				"lpg.call-graph.saveDir": {
					"type": "string",
					"default": "",
					"description": "Default export target folder for call graphs"
				},
				"lpg.generation": {
					"type": "object",
					"default": {
						"mode": "internal",
						"visitor": "default"
					},
					"description": "Settings related to parser generation",
					"properties": {
						"mode": {
							"type": "string",
							"default": "internal",
							"description": "Determines the mode for code generation (none at all, only for internal use, also for external use)",
							"enum": [
								"none",
								"internal",
								"external"
							]
						},
						"outputDir": {
							"type": "string",
							"default": "",
							"description": "Output dir where all output is generated (relative to grammar or absolute path)"
						},
						"include_search_directory": {
							"type": "string",
							"default": "",
							"description": "Location to import/include grammars from (relative to a grammar or absolute path)"
						},
						"template_search_directory": {
							"type": "string",
							"default": "",
							"description": "Location to template grammars from (relative to a grammar or absolute path)"
						},
						"language": {
							"type": "string",
							"default": "java",
							"description": "Specifies the target language for the generated code, overriding what is specified in the grammar",
							"enum": [
								"xml",
								"c",
								"c++",
								"rt_cpp",
								"java",
								"plx",
								"plx",
								"plxasm",
								"ml"
							]
						},
						"visitor": {
							"type": "string",
							"default": "default",
							"description": "Create visitor on code generation",
							"enum": [
								"none",
								"default",
								"preorder"
							]
						},
						"trace": {
							"type": "string",
							"default": "conflicts",
							"description": "trace rule info when code generation",
							"enum": [
								"none",
								"default",
								"full"
							]
						},
						"quiet": {
							"type": "boolean",
							"default": false,
							"description": "quit option"
						},
						"verbose": {
							"type": "boolean",
							"default": false,
							"description": "verbose option"
						},
						"alternativeExe": {
							"type": "string",
							"description": "Path to a exe file to be used for parser generation"
						},
						"additionalParameters": {
							"type": "string",
							"description": "Any other command line parameters you want to send to the LPG"
						}
					}
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm install",
		"compile": "tsc -p ./"
	},
	"dependencies": {
		"get-port": "^5.1.1",
		"expand-home-dir": "^0.0.3",
		"fs-extra": "^9.0.1",
		"d3": "^5.9.0",
		"abort-controller": "3.0.0",
		"vscode-languageclient": "7.0.0-next.9",
		"winston": "^3.2.1",
		"winston-daily-rotate-file": "^3.10.0"
	},
	"devDependencies": {
		"@types/expect": "^24.3.0",
		"@types/fs-extra": "^9.0.10",
		"@types/glob": "^7.1.3",
		"@types/lodash": "^4.14.168",
		"@types/mocha": "^8.2.2",
		"@types/node": "^14.14.37",
		"@types/vscode": "1.48.0",
		"glob": "^7.1.4",
		"mocha": "^7.1.0",
		"tslint": "^5.16.0",
		"typescript": "^3.8.3",
		"vsce": "^1.75.0",
		"vscode-test": "^1.3.0",
		"@types/lodash.findindex": "^4.6.6",
		"lodash.findindex": "^4.6.0",
		"lodash.template": ">=4.5.0"
	}
}
